@page "/it-system/edit/{Id:int}"
@using FrontEnd.Data
@inject ItSystemService ItSystemService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Edit IT System</PageTitle>

<div class="container">
    <h1>Edit IT System</h1>
    
    @if (loading)
    {
        <div class="d-flex justify-content-center mt-5">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (itSystem == null)
    {
        <div class="alert alert-danger mt-4">
            IT System not found. It may have been deleted or you may not have permission to view it.
        </div>
        <button class="btn btn-primary" @onclick='() => NavigationManager.NavigateTo("/it-systems")'>
            Back to List
        </button>
    }
    else
    {
        <div class="row mt-4">
            <div class="col-md-8">
                <EditForm Model="@itSystem" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label for="name" class="form-label">Name</label>
                        <InputText id="name" @bind-Value="itSystem.Name" class="form-control" />
                        <ValidationMessage For="@(() => itSystem.Name)" />
                    </div>

                    <div class="mb-3">
                        <label for="description" class="form-label">Description</label>
                        <InputTextArea id="description" @bind-Value="itSystem.Description" class="form-control" rows="3" />
                    </div>

                    <div class="mb-3">
                        <label for="owner" class="form-label">Owner</label>
                        <InputText id="owner" @bind-Value="itSystem.Owner" class="form-control" />
                    </div>

                    <div class="mb-3">
                        <label for="technicalOwner" class="form-label">Technical Owner</label>
                        <InputText id="technicalOwner" @bind-Value="itSystem.TechnicalOwner" class="form-control" />
                    </div>

                    <div class="mb-3">
                        <label for="version" class="form-label">Version</label>
                        <InputText id="version" @bind-Value="itSystem.Version" class="form-control" />
                    </div>

                    <div class="mb-3">
                        <label for="installationDate" class="form-label">Installation Date</label>
                        <InputDate id="installationDate" @bind-Value="itSystem.InstallationDate" class="form-control" />
                    </div>

                    <div class="mb-3">
                        <label for="lastUpdateDate" class="form-label">Last Update Date</label>
                        <InputDate id="lastUpdateDate" @bind-Value="itSystem.LastUpdateDate" class="form-control" />
                    </div>

                    <div class="mb-3">
                        <label for="status" class="form-label">Status</label>
                        <InputSelect id="status" @bind-Value="itSystem.Status" class="form-select">
                            @foreach (var status in Enum.GetValues<SystemStatus>())
                            {
                                <option value="@status">@status</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="mb-3">
                        <button type="submit" class="btn btn-primary me-2" disabled="@isSubmitting">
                            @if (isSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span> Saving...</span>
                            }
                            else
                            {
                                <span>Save</span>
                            }
                        </button>
                        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private ItSystem? itSystem;
    private bool loading = true;
    private bool isSubmitting = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadItSystemAsync();
    }

    private async Task LoadItSystemAsync()
    {
        loading = true;
        itSystem = await ItSystemService.GetItSystemAsync(Id);
        loading = false;
    }

    private async Task HandleValidSubmit()
    {
        if (isSubmitting || itSystem == null) return;

        isSubmitting = true;
        bool success = await ItSystemService.UpdateItSystemAsync(itSystem);
        isSubmitting = false;

        if (success)
        {
            NavigationManager.NavigateTo("/it-systems");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Failed to update the IT system. Please try again.");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/it-systems");
    }
}
